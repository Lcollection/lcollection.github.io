<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构（一）-- 序章</title>
    <link href="/2021/09/13/%E5%BA%8F%E7%AB%A0/"/>
    <url>/2021/09/13/%E5%BA%8F%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="关于这门课程"><a href="#关于这门课程" class="headerlink" title="关于这门课程"></a>关于这门课程</h1><p>数据结构作为计算机专业的基础专业课程，在学习中有着举足轻重的作用；而如果未来有考研的计划的话，这会是一个很重要的课程。</p><h2 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h2><p>未来我会跟着课程的进度，对对应章节进行归纳整理出相对应的文章，把握课程的中心思想并为期末复习做好充足准备。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于未来的一些小想法</title>
    <link href="/2021/09/10/%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%83%B3%E6%B3%95/"/>
    <url>/2021/09/10/%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%83%B3%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>过去，自己并没有太多的关注项目本身，而且自己也忽视了很长时间的文章产出与更新。在和周围人交流沟通之后还是发现了很多机会的，而且并不是所有人对于某些技术背后的原理能够说的清道的明的。所以，要利用未来的时间不断去更新完善自己的文章内容和所面向的群体。对于课程内容也可以单独创建一个GitHub仓库进行统一的管理，就像清华大学等学校的相关专业开源项目一样。将自己的课程，开放面相全体。</p><h2 id="初步计划的内容"><a href="#初步计划的内容" class="headerlink" title="初步计划的内容"></a>初步计划的内容</h2><ul><li><p>C#语言的开发应用</p></li><li><p>Python程序设计基础</p></li><li><p>Linux操作系统</p></li><li><p>生物信息学的相关内容</p></li><li><p>数据结构与算法</p></li><li><p>其他一些较为前沿的技术</p></li></ul><h2 id="这些内容将会以什么样的形式展开"><a href="#这些内容将会以什么样的形式展开" class="headerlink" title="这些内容将会以什么样的形式展开"></a>这些内容将会以什么样的形式展开</h2><p>未来将会在blog和知乎专栏中，不断的书写改进。</p>]]></content>
    
    
    
    <tags>
      
      <tag>闲谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github入门教程</title>
    <link href="/2021/03/09/Github%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2021/03/09/Github%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这又是我开的另一个大坑的内容，这部分主要是想要讲一下GitHub的基本使用方法、一些常用的指令以及一个我正在采用的同步的一个流程。</p><h2 id="关于GitHub"><a href="#关于GitHub" class="headerlink" title="关于GitHub"></a>关于GitHub</h2><p>GitHub是全球最大的同性交流网站，在上面你几乎能找到你想要的一切内容，而且越来越多人和组织加入到开源的大家庭中这是一件好事。我也是很早以前就接触到了开源的世界，大家在一起交流分享知识增进自己的代码水平，让自己不断的成长。</p><h3 id="进入社区前你要做好的准备"><a href="#进入社区前你要做好的准备" class="headerlink" title="进入社区前你要做好的准备"></a>进入社区前你要做好的准备</h3><p>首先就是一个GitHub的账号，当然如今市面上有很多的开源社区都可以选择，技术和实现的过程几乎是一样的，这里我以我最常用的GitHub为例子来个大家讲解。账号可以在GitHub首页直接注册，目前来说裸连的话也是没有问题的。但是有些时候也会抽风，所以最好准备一个梯子以防不时之需。</p><p>注册完账号之后便是配置在本地环境，直接在终端中输入以下指令</p><p><code>ssh-keygen -C &quot;email adress&quot; -t rsa</code></p><p>这条指令会在你的用户路径下生成一个./ssh的文件夹，进入之后你会发现有两个文件，id_rsa这个文件是私钥（保存好），另一个id_rsa.pub这个是你的公钥。</p><p>之后进入GitHub的个人设置页面中<code>SSH and GPG keys</code>选项中将你的公钥复制进去（是公钥里面的数据，记事本打开即可），完成之后点击add SSH key。</p><p>这样你的配置就完成了。</p><h2 id="关于指令的用法"><a href="#关于指令的用法" class="headerlink" title="关于指令的用法"></a>关于指令的用法</h2><p>在本地的环境配置好了以后    </p><p><a href="https://www.notion.so/d4a976e09955401fbf818fb9dc29a981">常用指令</a></p><h2 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a>创建新仓库</h2><p>创建新的文件夹，打开，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><h2 id="检出仓库"><a href="#检出仓库" class="headerlink" title="检出仓库"></a>检出仓库</h2><p>执行语句将他人的仓库克隆到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> /path/to/repository<br></code></pre></td></tr></table></figure><p>如果是远程服务器上的仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> username@host:/path/to/repository<br></code></pre></td></tr></table></figure><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>本地的仓库被GitHub用三部分进行维护，并加以三颗“树”状结构进行维护。</p><p>工作目录   是你仓库中实际存储的内容</p><p>暂存区（Index）   在你改动工作目录后，将你的操作暂时存储在该区域</p><p>HEAD     他指向自己的最后一次操作</p><h2 id="添加和提交"><a href="#添加和提交" class="headerlink" title="添加和提交"></a>添加和提交</h2><p>可以提出更改（将他们添加到暂存区中）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add &lt;filename&gt;<br>git add *<br></code></pre></td></tr></table></figure><p>使用指令将实际的更改提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;代码提交信息&quot;</span><br></code></pre></td></tr></table></figure><p>之后你的改动就被提交到了HEAD，但是还没有推送到远程仓库</p><h2 id="推送改动"><a href="#推送改动" class="headerlink" title="推送改动"></a>推送改动</h2><p>执行语句，将你的改动从HEAD中推送到远端仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin master<br></code></pre></td></tr></table></figure><p>上方语句实例中，将HEAD提交到master分支中，也可提交到其他分支中。</p><p>如果没有克隆现有仓库，而且你还想将自己的仓库同步到某个服务器中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin &lt;server&gt;<br></code></pre></td></tr></table></figure><p>这样就可以将自己的仓库同步上去了</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>在开发的时候是在默认的主支上进行的，你可以通过一定的指令操作同步到其他分支，最后开发结束之后合并在一起。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b feature_x  //创建一个feature_x的分支，并切换过去<br>git checkout mastr         //切换到主分支<br>git branch -d feature_x    //将feature_x分支删除<br>git push origin &lt;branch&gt;   //除非将分支推送到远程仓库，不然别人无法访问<br></code></pre></td></tr></table></figure><h2 id="更新合并"><a href="#更新合并" class="headerlink" title="更新合并"></a>更新合并</h2><p>更新本地仓库至线上最新改动版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull<br></code></pre></td></tr></table></figure><p>以用来在自己的工作目录中 <em>获取(fetch)</em> 并 <em>合并(merge)  远端的改动</em></p><p>如果要合并其他分支到自己当前分支上时，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git merge &lt;branch&gt;<br></code></pre></td></tr></table></figure><p>在这两种情况下，git都会尝试自动合并改动。有一定的几率会出现 冲突(conflicts) 。这时候需要自己去手动修改某些文件，使得修改完成之后，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add &lt;filename&gt;<br></code></pre></td></tr></table></figure><p>将修改的内容标记为合并成功</p><p>在合并之前，可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff &lt;source_branch&gt;&lt;target_branch&gt;<br></code></pre></td></tr></table></figure><p>来看一下修改前后文件的差别在哪里</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>为软件发布创建标签是推荐的，在之前的软件开发过程中，这个理念就有所体现，在SVN中也有。</p><p>可以执行以下命令创建一个叫做1.0.0的标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag 1.0.0 1b2e1d63ff<br></code></pre></td></tr></table></figure><p>后面的 1b2e1d63ff 是你想提交ID的前十位字符，可以使用 git log 获取提交ID</p><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>如果想要了解一个本地仓库的历史记录，可以直接执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>同时也可以添加一些参数，来获取一些自己想要的特定消息，只看某一人的提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --author=bob<br></code></pre></td></tr></table></figure><p>一个压缩后的每一条提交记录只占一行的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --pretty=oneline<br></code></pre></td></tr></table></figure><p>或者你想通过ASCII艺术的树形结构来展示所有的分支，每个分支都标示了他的名字和标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --graph --oneline --decorate --all<br></code></pre></td></tr></table></figure><p>看看那些文件发生了变化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --name-status<br></code></pre></td></tr></table></figure><p>这些只是你可以使用的一小部分参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><h2 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h2><p>假如操作发生失误，可以使用如下的命令替换掉本地改动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout --&lt;filename&gt;<br></code></pre></td></tr></table></figure><p>此命令可以将HEAD中的最新内容替换掉你的工作目录中的文件。已经添加到暂存区的改动以及新文件都不会收到影响。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch origin<br>git reset --hard oringin/master<br></code></pre></td></tr></table></figure><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你的本地主分支指向它</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>构建自己的学习环境</title>
    <link href="/2021/02/13/%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/02/13/%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>一直觉得自己的学习环境是十分混乱的，<a id="more"></a>而且学习的目标也是杂乱的，不能很轻易的就看出自己的学习的需求，所以一套合理的学习分工是很有必要的，充分利用自己周未的资源同时也提高自己的学习效率。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>我的主要的设备是两台笔记本（win+mac环境）加上一台ipad。平时上课和课后的笔记练习等等都是在ipad上完成的，这样大大方便了我的日常学习，在课堂上也可以很快的记录笔记，只是课后的整理并不是很有效率。同时两台电脑的环境可以很好的互相弥补之间的差距，这样的话就算是需要用到win环境的时候也有必要的准备。</p><h2 id="如何更加充分的利用自己的ipad"><a href="#如何更加充分的利用自己的ipad" class="headerlink" title="如何更加充分的利用自己的ipad"></a>如何更加充分的利用自己的ipad</h2><p>  我很担心自己买回来ipad之后是“买前生产力，买后爱奇艺”的这种情况，但是事实并不是这样的，第一个学期下来，我还是坚持的挺好的，比较少的游戏时间和较较长的学习时间。</p><p>  那么下学期，我想让我的学习更具有效率一点，所以我就要准备好一明确的分工，文献的整理可以在整理好后全平台查询。</p><p>  一节课开始前我会准备提前先预习下一节课的内容，同时，上课时gn会很好的帮助我记录一节课的内容，其实就算是错过了也有len可以帮助我及时的把黑板的内容记录下来。</p><h2 id="暂时想到这么多，下学期开学之后会再更新的"><a href="#暂时想到这么多，下学期开学之后会再更新的" class="headerlink" title="暂时想到这么多，下学期开学之后会再更新的"></a>暂时想到这么多，下学期开学之后会再更新的</h2>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac环境下安装conda并配置环境</title>
    <link href="/2021/02/09/Mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85conda%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/02/09/Mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85conda%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>  从Linux环境到Windows环境再到如今Mac环境下，<a id="more"></a>python的环境和一些常用环境的配置都挺让人头大的，正巧最近了解到conda环境可以很方便的配置一些常用的环境，以及一些python的包管理也很方便，所以这里我便简单的记录一下我的安装历程，把出现的一些问题罗列一下，希望能帮助到别人不踩相同的坑。</p><h1 id="安装Anacoda-Miniconda"><a href="#安装Anacoda-Miniconda" class="headerlink" title="安装Anacoda/Miniconda"></a>安装Anacoda/Miniconda</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>根据自己使用的环境的不同，可以在清华大学开源镜像站中找到合适的安装包，</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/#">快速链接</a> 在右侧获取下载链接 —–&gt; 常用软件 ——&gt; 选择anaconda/miniconda</p><p>两者的主要区别就是，anaconda包含了所有的所需要的内容，而miniconda是一个轻量级的替代，只包含了python和conda从而体积也小了很多。</p><p>下载之后在终端中，使用指令<code>bash xxxxx.sh</code>进行安装，按回车后会出现大段的安装说明，直接顺着流程进行就可以顺利安装了</p><h2 id="配置conda环境"><a href="#配置conda环境" class="headerlink" title="配置conda环境"></a>配置conda环境</h2><p>安装完成之后，使用<code>vim ~/.condarc</code>编辑这个文件，便可以修改里面的内容，根据清华大学开源镜像站中的帮助手册，你可以很快的配置完成这一步。</p><h2 id="出现的情况"><a href="#出现的情况" class="headerlink" title="出现的情况"></a>出现的情况</h2><p>每次打开终端自动进入conda的虚拟环境</p><p>解决方法：</p><p>​            在.condarc中配置    auto_activate_base  为   false就是关闭</p><p>​            如果需要打开 conda config –set auto_activate_base true</p><p>​            就可以重新打开</p><h1 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h1><p>使用指令 <code>conda create -n env_name</code>可以创建一个名为env_name的环境</p><p>之后进入环境之后再运行 <code>conda install pkg_name</code>安装你所需要的包</p><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><p>1.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><br><span class="hljs-attribute">Linking</span> packages … <br><span class="hljs-attribute">PaddingError</span>: Placeholder of length ‘<span class="hljs-number">30</span>’ too short in package qt-<span class="hljs-number">5</span>.<span class="hljs-number">6</span>.<span class="hljs-number">2</span>-vc<span class="hljs-number">14</span>_<span class="hljs-number">0</span>.% <br><span class="hljs-attribute">The</span> package must be rebuilt with conda-build &gt; <span class="hljs-number">2</span>.<span class="hljs-number">0</span>.<br><br></code></pre></td></tr></table></figure><p>方案：</p><p><code>conda update conda</code> ,然后<code>conda update –all </code>下，可以解决大部分问题</p><p>参考阅读：https:<em>//blog.csdn.net/xxzhangx/article/details/54379255?locationNum=3&amp;fps=1</em></p><h1 id="常用的指令"><a href="#常用的指令" class="headerlink" title="常用的指令"></a>常用的指令</h1><h2 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h2><p><code>conda deactivate</code></p><h2 id="查看所有虚拟环境"><a href="#查看所有虚拟环境" class="headerlink" title="查看所有虚拟环境"></a>查看所有虚拟环境</h2><p><code>conda info -e</code></p><h2 id="查看安装的包"><a href="#查看安装的包" class="headerlink" title="查看安装的包"></a>查看安装的包</h2><p><code>conda list</code></p><h2 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h2><p><code>conda remove -n env_name --all</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ACM】一道经典的模拟题——回文串判断</title>
    <link href="/2021/02/06/%E3%80%90ACM%E3%80%91%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E7%9A%84%E6%A8%A1%E6%8B%9F%E9%A2%98%E2%80%94%E2%80%94%E5%9B%9E%E6%96%87%E4%B8%B2%E5%88%A4%E6%96%AD/"/>
    <url>/2021/02/06/%E3%80%90ACM%E3%80%91%E4%B8%80%E9%81%93%E7%BB%8F%E5%85%B8%E7%9A%84%E6%A8%A1%E6%8B%9F%E9%A2%98%E2%80%94%E2%80%94%E5%9B%9E%E6%96%87%E4%B8%B2%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>输入一串字符（长度小于100），判断该串字符是否是回文串（正序读与逆序读内容相同）。</p><a id="more"></a><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>输入一串字符（长度小于100）。</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>若该串字符是回文串输出“yes”，否则输出”no“。</p><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">asdfgfdsa</span><br></code></pre></td></tr></table></figure><h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-literal">yes</span><br></code></pre></td></tr></table></figure><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>  直接按照题目所给的要求，直接从字符串的第一个字符开始依次和尾部的倒数第一个字符进行比较如果相同则继续向下，否则跳出结束输出错误结果。</p><p>​    <strong>for(int i=0;i&lt;str.length();i++)</strong></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>因为是回文串的形式，所以从最中间向两边是对称的，所以我们只需要便利1/2的长度就能求出最后的结果。长度为偶数的话就会两两匹配，奇数个的长度的话就会最后单剩下中间的字符，自身与自身比较一定相同。</p><p><strong>for(int i=0;i&lt;=str.length()/2;i++)</strong></p><h1 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">string</span> str;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cin</span> &gt;&gt; str)<br>    &#123;<br>        <span class="hljs-keyword">int</span> len = str.length();<br>        <span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;=len/<span class="hljs-number">2</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(str[i] != str[len<span class="hljs-number">-1</span>-i]) &#123;flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;no&quot;</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;yes&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ACM】常用STL整理</title>
    <link href="/2021/02/01/%E3%80%90ACM%E3%80%91%E5%B8%B8%E7%94%A8STL%E6%95%B4%E7%90%86/"/>
    <url>/2021/02/01/%E3%80%90ACM%E3%80%91%E5%B8%B8%E7%94%A8STL%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>青蛙过河题解</title>
    <link href="/2021/02/01/%E9%9D%92%E8%9B%99%E8%BF%87%E6%B2%B3%E9%A2%98%E8%A7%A3/"/>
    <url>/2021/02/01/%E9%9D%92%E8%9B%99%E8%BF%87%E6%B2%B3%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>我会以图片的形式简单形容一下思路，能够更好的理解。</p><a id="more"></a><p><img src="/Users/l_collection/blog/source/img/img001.jpeg"></p><p>可以很明显的推导出，整个递归的边界就是<strong>tiao(0,y) = y+1 ** ，而左右两岸之间没多一根柱子的话就会使他的数量翻一倍，</strong>tiao(x,y) = tiao(x-1,y)*2** 这个公式是推导出来的另一种形式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">tiao</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x,<span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(x == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> y+<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>*tiao(x<span class="hljs-number">-1</span>,y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> t;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t)!=EOF)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=t;i++)<br>        &#123;<br>            <span class="hljs-keyword">int</span> x,y;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);<br>            <span class="hljs-built_in">cout</span> &lt;&lt; tiao(x,y) &lt;&lt;<span class="hljs-built_in">endl</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>这个题目整体还是以道很简单的递归的题目，同时也是看自己的数学上的推导能力，接下来还是要自己动手多推导，同时也要提高自己的代码实现能力，又很多的题目都是有想法的但是最后还是没有足够的代码基础进行实现。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SDUT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【ACM】遇到的数学小问题</title>
    <link href="/2021/01/28/%E3%80%90ACM%E3%80%91%E9%81%87%E5%88%B0%E7%9A%84%E6%95%B0%E5%AD%A6%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2021/01/28/%E3%80%90ACM%E3%80%91%E9%81%87%E5%88%B0%E7%9A%84%E6%95%B0%E5%AD%A6%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a><p>在做题的时候遇到了两个很有趣的问题，一个是组合数学中的<color>错排问题</color>，而另一个则是数学规律的推导。</p><h2 id="错排问题"><a href="#错排问题" class="headerlink" title="错排问题"></a>错排问题</h2><p>出自SDUT-2058 <a href="%E4%B8%89%E5%9B%BD%E8%BD%B6%E4%BA%8B%E2%80%94%E2%80%94%E5%B7%B4%E8%9C%80%E4%B9%8B%E5%8D%B1">https://acm.sdut.edu.cn/onlinejudge3/contests/3677/problems/F</a></p><p>这个问题的解决思路，是组合数学中的错排问题，这样的话我们可以直接使用错排公式直接解出答案。</p><p>*<em>D[n] = (n-1) * (D[n-1] + D[n-2])*</em></p><p>具体的推导内容并没有很仔细的整理，只是简单概括为当第一个进行错排时，会占据有n-1种错误的选择，而在占据一个错误的位置后会导致该位置的出现n-1种错误的选择。以此类推，每次都会出现这样的位置，一直出现到n-n=0的结果。</p><p>第二个问题是对与一些简单的数学知识的应用——切饼问题：在切n刀的情况下，能够出现的最大的块数R[n]。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/10/hello-world/"/>
    <url>/2021/01/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
